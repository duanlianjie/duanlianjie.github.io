[{"categories":["MySQL"],"content":"[TOC] ","date":"2020-08-09","objectID":"/mysqlsourceerror2/:0:0","tags":["MySQL"],"title":"MySQL SOURCE 导入脚本时 Error: Failed to open file，error: 2","uri":"/mysqlsourceerror2/"},{"categories":["MySQL"],"content":"MySQL SOURCE 导入脚本时 Error: Failed to open file，error: 2 路径使用绝对路径 路径不要含有中文 路径不需要加任何引号 Windows下使用正斜杠 “/” ","date":"2020-08-09","objectID":"/mysqlsourceerror2/:1:0","tags":["MySQL"],"title":"MySQL SOURCE 导入脚本时 Error: Failed to open file，error: 2","uri":"/mysqlsourceerror2/"},{"categories":["Spring"],"content":"[TOC] IOC BeanFactory 和 ApplicationContext （1）BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象 （2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用 加载配置文件时候就会把在配置文件对象进行创建 使用这种方式的优点：把创建对象这种耗时耗资源的操作放在项目启动时进行处理更合适 ","date":"2020-08-01","objectID":"/spring/:0:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"IOC 操作 Bean 管理 DI是IOC的一种具体实现 ","date":"2020-08-01","objectID":"/spring/:1:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"IOC 操作 Bean 管理（xml 注入其他类型属性） ","date":"2020-08-01","objectID":"/spring/:2:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"1、字面量 （1）null 值 \u003c!--null 值--\u003e \u003cproperty name=\"address\"\u003e \u003cnull/\u003e \u003c/property\u003e （2）属性值包含特殊符号 \u003c!--属性值包含特殊符号 1 把\u003c\u003e进行转义 \u0026lt; \u0026gt; 2 把带特殊符号内容写到 \u003c![CDATA[xxxx]] --\u003e \u003cproperty name=\"address\"\u003e \u003cvalue\u003e\u003c![CDATA[\u003c\u003c南京\u003e\u003e]]\u003e\u003c/value\u003e \u003c/property\u003e ","date":"2020-08-01","objectID":"/spring/:2:1","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"2、注入属性-外部 bean （1）创建两个类 service 类和 dao 类 （2）在 service 调用 dao 里面的方法 （3）在 spring 配置文件中进行配置 public class UserService { // 创建 UserDao 类型属性，生成 set 方法 private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; } public void add() { System.out.println(\"service add...\"); userDao.update(); } } \u003c!--1 service 和 dao 对象创建--\u003e \u003cbean id=\"userService\" class=\"com.atguigu.spring5.service.UserService\"\u003e \u003c!--注入 userDao 对象 name 属性：类里面属性名称 ref 属性：创建 userDao 对象 bean 标签 id 值 --\u003e \u003cproperty name=\"userDao\" ref=\"userDaoImpl\"\u003e\u003c/property\u003e \u003c/bean\u003e \u003cbean id=\"userDaoImpl\" class=\"com.atguigu.spring5.dao.UserDaoImpl\"\u003e\u003c/bean\u003e ","date":"2020-08-01","objectID":"/spring/:2:2","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"IOC 操作 Bean 管理（xml 自动装配） ","date":"2020-08-01","objectID":"/spring/:3:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"1、什么是自动装配 （1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入 ","date":"2020-08-01","objectID":"/spring/:3:1","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"2、自动装配过程 （1）根据属性名称自动注入 \u003c!--实现自动装配 bean 标签属性 autowire：配置自动装配 autowire 属性常用两个值： byName 根据属性名称注入，注入值 bean 的 id 值和类属性名称一样 byType 根据属性类型注入 --\u003e \u003cbean id=\"emp\" class=\"com.atguigu.spring5.autowire.Emp\" autowire=\"byName\"\u003e \u003c!--\u003cproperty name=\"dept\" ref=\"dept\"\u003e\u003c/property\u003e--\u003e \u003c/bean\u003e \u003cbean id=\"dept\" class=\"com.atguigu.spring5.autowire.Dept\"\u003e\u003c/bean\u003e （2）根据属性类型自动注入 \u003c!--实现自动装配 bean 标签属性 autowire：配置自动装配 autowire 属性常用两个值： byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样 byType 根据属性类型注入 --\u003e \u003cbean id=\"emp\" class=\"com.atguigu.spring5.autowire.Emp\" autowire=\"byType\"\u003e \u003c!--\u003cproperty name=\"dept\" ref=\"dept\"\u003e\u003c/property\u003e--\u003e \u003c/bean\u003e \u003cbean id=\"dept\" class=\"com.atguigu.spring5.autowire.Dept\"\u003e\u003c/bean\u003e ","date":"2020-08-01","objectID":"/spring/:3:2","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"IOC 操作 Bean 管理（外部属性文件） ","date":"2020-08-01","objectID":"/spring/:4:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"1、直接配置数据库连接池 （1）引入德鲁伊连接池依赖 jar 包 （2）配置德鲁伊连接池 \u003c!--直接配置连接池--\u003e \u003cbean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\u003e \u003cproperty name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"\u003e\u003c/property\u003e \u003cproperty name=\"url\" value=\"jdbc:mysql://localhost:3306/userDb\"\u003e\u003c/property\u003e \u003cproperty name=\"username\" value=\"root\"\u003e\u003c/property\u003e \u003cproperty name=\"password\" value=\"root\"\u003e\u003c/property\u003e \u003c/bean\u003e ","date":"2020-08-01","objectID":"/spring/:4:1","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"2、引入外部属性文件配置数据库连接池 （1）创建外部属性文件，properties 格式文件，填写数据库信息 （2）把外部 properties 属性文件引入到 spring 配置文件中 在 spring 配置文件引入 context 名称空间 \u003cbeans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:util=\"http://www.springframework.org/schema/util\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\u003e 在 spring 配置文件使用标签引入外部属性文件 \u003c!--引入外部属性文件--\u003e \u003ccontext:property-placeholder location=\"classpath:jdbc.properties\"/\u003e \u003c!--配置连接池--\u003e \u003cbean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\u003e \u003cproperty name=\"driverClassName\" value=\"${prop.driverClass}\"\u003e\u003c/property\u003e \u003cproperty name=\"url\" value=\"${prop.url}\"\u003e\u003c/property\u003e \u003cproperty name=\"username\" value=\"${prop.userName}\"\u003e\u003c/property\u003e \u003cproperty name=\"password\" value=\"${prop.password}\"\u003e\u003c/property\u003e \u003c/bean\u003e ","date":"2020-08-01","objectID":"/spring/:4:2","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"IOC 操作 Bean 管理（基于注解方式） ","date":"2020-08-01","objectID":"/spring/:5:0","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"1、什么是注解 （1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值..) （2）使用注解，注解作用在类上面，方法上面，属性上面 （3）使用注解目的：简化 xml 配置 ","date":"2020-08-01","objectID":"/spring/:5:1","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"2、Spring 针对 Bean 管理中创建对象提供注解 （1）@Component （2）@Service （3）@Controller （4）@Repository 上面四个注解功能是一样的，都可以用来创建 bean 实例 ","date":"2020-08-01","objectID":"/spring/:5:2","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"3、基于注解方式实现对象创建 第一步 引入依赖 第二步 开启组件扫描 第三步 创建类，在类上面添加创建对象注解 ","date":"2020-08-01","objectID":"/spring/:5:3","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Spring"],"content":"4、开启组件扫描细节配置 ","date":"2020-08-01","objectID":"/spring/:5:4","tags":["Spring"],"title":"Spring","uri":"/spring/"},{"categories":["Linux"],"content":"[TOC] 第 1 章 开山篇 Linux 学习介绍 ","date":"2020-07-24","objectID":"/linux/:0:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.1 Linux 的学习方向 Linux 运维工程师 Linux 嵌入式开发工程师 在 Linux 下做各种程序开发 ","date":"2020-07-24","objectID":"/linux/:1:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.2 Linux 的应用领域 ","date":"2020-07-24","objectID":"/linux/:2:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.2.1 个人桌面应用领域 传统 linux 应用最薄弱的环节。 传统 linux 由于界面简单、操作复杂、应用软件少的缺点， 一直被 windows 所压制，但近些年来随着 ubuntu、fedora 等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，linux 在个人桌面领域的占有率在逐渐的提高。 ","date":"2020-07-24","objectID":"/linux/:2:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.2.2 服务器应用领域 linux 在服务器领域的应用是最强的。 linux 免费、稳定、高效等特点在这里得到了很好的体现，近些年来 linux 服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛。 ","date":"2020-07-24","objectID":"/linux/:2:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.2.3 嵌入式应用领域 近些年来 linux 在嵌入式领域的应用得到了飞速的提高 linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高。 主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、智能硬件等都 是其应用领域。以后再物联网中应用会更加广泛。 ","date":"2020-07-24","objectID":"/linux/:2:3","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"1.3 学习 Linux 的阶段 第 1 阶段：linux 环境下的基本操作命令，包括文件操作命令(rm mkdir chmod, chown)，编辑工具使用（vi vim），linux 用户管理(useradd userdel usermod)等。 第 2 阶段：linux 的各种配置（环境变量配置，网络配置，服务配置）。 第 3 阶段：linux 下如何搭建对应语言的开发环境（大数据，JavaEE, Python 等）。 第 4 阶段：能编写 shell 脚本，对 Linux 服务器进行维护。 第 5 阶段：能进行安全设置，防止攻击，保障服务器正常运行，能对系统调优。 第 6 阶段：深入理解 Linux 系统（对内核有研究），熟练掌握大型网站应用架构组成、并熟悉各个环节的部署和维护方法。 第 2 章 基础篇 Linux 入门 ","date":"2020-07-24","objectID":"/linux/:3:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"2.1 Linux 介绍 (1) Linux 是一款操作系统，免费，开源，安全，高效，稳定，处理高并发非常强悍，现在很多的企业级的项目都部署到 Linux/Unix 服务器运行。 (2) Linux 创始人 (3) Linux 的主要的发行版 ","date":"2020-07-24","objectID":"/linux/:4:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"2.2 UNIX GNU Linux的关系 ","date":"2020-07-24","objectID":"/linux/:5:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"2.3 Linux和Windows比较 第 3 章 基础篇 VM 和 Linux 系统(CentOS)安装 ","date":"2020-07-24","objectID":"/linux/:6:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.1 安装 vm 和 Centos ","date":"2020-07-24","objectID":"/linux/:7:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.2 VM 安装的步骤 （1） 去 BIOS 里修改设置开启虚拟化设备支持（f2, f10） （2）安装虚拟机软件 ","date":"2020-07-24","objectID":"/linux/:8:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.3 CentOS 安装的步骤 网络连接模式 桥连接：Linux 可以和其它的系统通信，但是可能造成ip冲突 NAT：网络地址转换方式，linux可以访问外网，不会造成ip冲突 主机模式：你的 linux 是一个独立的主机，不能访问外网 ","date":"2020-07-24","objectID":"/linux/:9:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.4 vmtools 安装 ","date":"2020-07-24","objectID":"/linux/:10:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.6.1 介绍 1)可以直接粘贴命令在 windows 和 centos 系统之间 2)可以设置 windows 和 centos 的共享文件夹 ","date":"2020-07-24","objectID":"/linux/:10:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.6.2 安装 vmtools 的步骤 1.进入 centos 2.点击 vm 菜单的-\u003einstall vmware tools 3.centos 会出现一个 vm 的安装包 4.点击右键解压, 得到一个安装文件 5.进入该 vm 解压的目录 ，该文件在 /root/桌面/vmware-tools-distrib/下 6.安装 ./vmware-install.pl 7.全部使用默认设置即可 8.需要 reboot 重新启动即可生效 ","date":"2020-07-24","objectID":"/linux/:10:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"3.6.3 使用 vmtools 来设置 windows 和 linux 的共享文件夹 虚拟机-\u003e设置-\u003e选项-\u003e共享文件夹 第 4 章 基础篇 Linux 的目录结构 ","date":"2020-07-24","objectID":"/linux/:10:3","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"4.1 基本介绍 linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。 在Linux世界里，一切皆文件。 ","date":"2020-07-24","objectID":"/linux/:11:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"4.2 目录结构的具体介绍 /bin(/usr/bin 、 /usr/local/bin) 是Binary的缩写, 这个目录存放着最经常使用的命令。 /sbin (/usr/sbin 、 /usr/local/sbin) s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /home 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /root 该目录为系统管理员，也称作超级权限者的用户主目录。 /etc 所有的系统管理所需要的配置文件和子目录，比如my.conf。 /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows下的program files目录。 /boot 存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev 类似于windows的设备管理器，把所有的硬件用文件的形式存储。 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。 /mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。 /usr/local 这是给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。 /var 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。 /opt 这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。默认为空。 /selinux [security-enhanced linux] 360 SELinux是一种安全子系统,它能控制程序只能访问特定文件。 /tmp 这个目录是用来存放一些临时文件的。 /lib 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /proc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。 /srv service缩写，该目录存放一些服务启动之后需要提取的数据。 /sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs。 第 5 章 实操篇 远程登录 Linux 系统 ","date":"2020-07-24","objectID":"/linux/:12:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"5.1 为什么需要远程登录 Linux 公司开发时候， 具体的情况是这样的： linux 服务器是开发小组共享的，正式上线的项目是运行在公网的，因此程序员需要远程登录到 centos 进行项目管理或者开发 ","date":"2020-07-24","objectID":"/linux/:13:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"5.2 远程登录 Xshell Xshell是一个强大的安全终端模拟软件，它支持 SSH1, SSH2, 以及 Microsoft Windows 平台的 TELNET 协议。 特别说明：如果希望安装好 XShell就可以远程访问 Linux 系统的话，需要有一个前提，就是 Linux 启用了 SSHD 服务，该服务会监听 22 号端口。 ","date":"2020-07-24","objectID":"/linux/:14:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"5.3 远程上传下载文件 Xftp 第 6 章 实操篇 vi 和 vim 编辑器 ","date":"2020-07-24","objectID":"/linux/:15:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"6.1 vi和vim的基本介绍 所有的 Linux 系统都会内建 vi 文本编辑器。 vim 具有程序编辑的能力，可以看做是 vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计、代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 ","date":"2020-07-24","objectID":"/linux/:16:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"6.2 vi 和 vim 的三种常见模式 正常模式 在该模式下，可以使用快捷键。 以 vim 打开一个档案就直接进入正常模式了(这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用 『复制、粘贴』来处理你的文件数据。 编辑模式 / 插入模式 在该模式下，可以输入内容。 按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可 命令模式 在该模式下，可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作 ","date":"2020-07-24","objectID":"/linux/:17:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"6.3 vi 和 vim 三种模式的相互转化图 ","date":"2020-07-24","objectID":"/linux/:18:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"6.4 常用快捷键 正常模式 拷贝当前行：yy 拷贝当前行向下的 5 行：5yy 粘贴：p 删除当前行：dd 删除当前行向下的 5 行：5dd 定位文档的最末行：G 定位文档的最首行：gg 撤销：u 光标移动到 第 20 行 输入20这个数 shift+g 在文件中查找某个单词：/关键字 输入 n 就是查找下一个 命令模式 wq：保存并退出 q!：不保存并强制退出 q：没有修改才能退出 在文件中查找某个单词：:/关键字 输入 n 就是查找下一个 显示文件的行号，取消文件的行号：:set nu 和 :set nonu ","date":"2020-07-24","objectID":"/linux/:19:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"6.5 vim 和 vi 的快捷键键盘一览图 第 7 章 实操篇 开机、重启和用户登录注销 ","date":"2020-07-24","objectID":"/linux/:20:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"7.1 关机和重启 shutdown shutdown -h now : 立即关机 shutdown -h 1 : 1 分钟后关机 shutdown -r now : 立即重启 halt 就是直接使用，效果等价于关机 reboot 就是重启系统 sync ： 把内存的数据同步到磁盘 当我们关机或者重启时，都应该先执行以下 sync 指令，把内存的数据写入磁盘，防止数据丢失。 ","date":"2020-07-24","objectID":"/linux/:21:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"7.2 用户登录和注销 注销用户：logout logout 注销指令在图形运行级别无效，在运行级别 3 下有效 切换身份：su - 用户名 切换root：su - [root] 第 8 章 实操篇 用户管理 ","date":"2020-07-24","objectID":"/linux/:22:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.1 基本介绍 Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。 Linux 的用户需要至少要属于一个组。 ","date":"2020-07-24","objectID":"/linux/:23:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.2 用户相关基本指令 useradd 用户名 添加用户 Ubuntu 20.04 LTS不会自动创建家目录，Cent OS 7会自动创建家目录 useradd -d 目录 用户名 添加用户并指定家目录，家目录需要未创建 userdel 用户名 删除用户 userdel -r 用户名 删除用户以及家目录 passwd 用户名 指定或修改密码 id 用户名 查询用户信息 用户id 组id 组名：uid=1000(duanlianjie) gid=1000(duanlianjie) groups=1000(duanlianjie) su 用户名 不改变当前变量，只能使用exit退回 su - 用户名 改变为切换到用户的变量，可以使用logout退回 exit 退回到原用户 ","date":"2020-07-24","objectID":"/linux/:24:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.2.1 su 和 su - 的区别 duanlianjie 登录 su 切换 su 只能获得root的执行权限，不能获得环境变量 su - 切换 su - 切换到root并获得root的环境变量及执行权限 “-” 会进入一个login shell，即和该用户登录的情况完全一样 ","date":"2020-07-24","objectID":"/linux/:24:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.2.1 su 和 sudo 的区别 sudo 通过 sudo，能把某些超级权限有针对性的下放，并且不需要普通用户知道 root 密码，所以 sudo 相对于权限无限制性的 su 来说，还是比较安全的。 所以 sudo 也能被称为受限制的su；另外 sudo 是需要授权许可的，所以也被称为授权许可的su。 sudo 执行命令的流程是当前用户切换到 root（或其它指定切换到的用户），然后以 root（或其它指定的切换到的用户）身份执行命令，执行完成后，直接退回到当前用户；而这些的前提是要通过sudo的配置文件/etc/sudoers来进行授权。 特性 sudo 能够限制用户只在某台主机上运行某些命令。 sudo 提供了丰富的日志，详细地记录了每个用户干了什么。它能够将日志传到中心主机或者日志服务器。 sudo 使用时间戳文件来执行类似的“检票”系统。当用户调用sudo并且输入它的密码时，用户获得了一张存活期为5分钟的票（这个值可以在编译的时候改变）。 sudo 的配置文件是 sudoers 文件，它允许系统管理员集中的管理用户的使用权限和使用的主机。它所存放的位置默认是在 /etc/sudoers，属性必须为0411。 密码： sudo 命令需要输入当前用户的密码，su 命令需要输入 root 用户的密码。 默认行为： sudo 命令只允许使用提升的权限运行单个命令，而 su 命令会启动一个新的 shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出登录。 日志记录 sudo 命令是以目标用户（默认情况下是 root 用户）的身份执行命令，但是它们会使用 sudoer 所配置的用户名来记录是谁执行命令。而 su 命令是无法直接跟踪记录用户切换到 root 用户之后执行了什么操作。 灵活性 sudo 命令比 su 命令灵活很多，因为你甚至可以限制 sudo 用户可以访问哪些命令。换句话说，用户通过 sudo 命令只能访问他们工作需要的命令。而 su 命令让用户有权限做任何事情。 使用 su 命令或直接以 root 用户身份登录有风险，所以一些 Linux 发行版（如 Ubuntu）默认禁用 root 用户帐户。鼓励用户在需要 root 权限时使用 sudo 命令。 ","date":"2020-07-24","objectID":"/linux/:24:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.3 用户组相关指令 groupadd 组名 添加组 groupdel 组名 删除组 useradd -g 用户组 用户名 添加用户并指定组 usermod -g 用户组 用户名 修改用户的组 ","date":"2020-07-24","objectID":"/linux/:25:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.4 用户和用户组配置文件 ","date":"2020-07-24","objectID":"/linux/:26:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.4.1 /etc/passwd 文件 用户的配置文件，记录用户的各种信息 每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell ","date":"2020-07-24","objectID":"/linux/:26:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.4.2 /etc/shadow 文件 口令的配置文件 每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 ","date":"2020-07-24","objectID":"/linux/:26:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"8.4.3 /etc/group 文件 组(group)的配置文件，记录 Linux 包含的组的信息 每行的含义：组名:口令:组标识号:组内用户列表 第 9 章 实操篇 实用指令 ","date":"2020-07-24","objectID":"/linux/:26:3","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.1 运行级别 init（为英语：initialization的简写）是 Unix 和 类Unix 系统中用来产生其它所有进程的程序。它以守护进程的方式存在，其进程号为1。 Linux系统在引导时加载Linux内核后，便由Linux内核加载init程序，由init程序完成余下的引导过程，比如加载运行级别，加载服务，引导Shell/图形化界面等等。 init的发展变化 System V System V init检查 ‘/etc/inittab’ 文件中是否含有 ‘initdefault’ 项。这告诉init系统是否有一个默认运行模式。如果没有默认的运行模式，那么用户将进入系统控制台，手动决定进入何种运行模式。 Upstart 完全代替 init ，可以异步开启进程，曾由Ubuntu等使用 systemd 完全替代init，可并行启动服务，并能减少在shell上的系统开销，相比传统的System V是一大革新，已被大多数Linux发行版所使用 ","date":"2020-07-24","objectID":"/linux/:27:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.1.1 System V 运行级别说明： 0：关机 1：单用户【找回丢失密码】 2：多用户状态无网络服务 3：多用户状态有网络服务 4：系统未使用保留给用户 5：图形界面 6：系统重启 常用运行级别是 3 和 5 ，要修改默认的运行级别可改文件 /etc/inittab 的 id:5:initdefault:这一行中的数字 ","date":"2020-07-24","objectID":"/linux/:27:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.1.2 systemd systemd是Linux电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件。 inittab is no longer used when using systemd. systemd uses “targets” instead of runlevels. By default, there are two main targets: multi-user.target: analogous to runlevel 3 graphical.target: analogous to runlevel 5 systemctl get-default：查看当前target systemctl set-default multi-user.target/graphical.target：设置target ","date":"2020-07-24","objectID":"/linux/:27:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.2 运行级别相关指令 init [012356] 切换到指定运行级别 ","date":"2020-07-24","objectID":"/linux/:28:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.2.1 找回root密码 进入到 单用户模式，然后修改 root 密码。因为进入单用户模式，root 不需要密码就可 以登录。 开机 -\u003e 在引导时输入 回车键 -\u003e 看到一个界面输入 e -\u003e 看到一个新的界面，选中第二行（编辑内核）再输入 e -\u003e 在这行最后输入 1 ,再输入 回车键 -\u003e 再次输入 b -\u003e 这时就会进入到单用户模式。 这时，我们就进入到单用户模式，使用 passwd 指令来修改 root 密码。 ","date":"2020-07-24","objectID":"/linux/:28:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.3 帮助指令 man [命令或配置文件] 获得帮助信息 help 命令 获得 shell 内置命令的帮助信息 ","date":"2020-07-24","objectID":"/linux/:29:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"9.4 文件目录类 pwd 显示当前工作目录的绝对路径 ls [选项] [目录或文件] -a ：显示当前目录所有的文件和目录，包括隐藏的 -l ：以列表的方式显示信息 -h：human，易读的方式显示信息 cd [目录] 切换到指定目录 cd ~ 或者 cd ：回到自己的家目录 cd .. 回到当前目录的上一级目录 mkdir [选项] 要创建的目录 -p ：创建多级目录 rmdir [选项] 要删除的空目录 删除的是空目录，如果目录下有内容时无法删除的 rm [选项] 要删除的文件或目录 删除文件或目录 -r ：递归删除整个文件夹 -f ： 强制删除不提示 touch 文件名称1 … 创建空文件 cp [选项] source dest 拷贝文件或文件夹到指定目录下 -r ：递归复制整个文件夹 当目标目录有同名文件，强制覆盖不提示的方法：\\cp …… mv oldNameFile newNameFile 重命名 mv File Folder 移动文件 cat [选项] 要查看的文件 查看文件内容，是以只读的方式打开 -n ：显示行号 more 要查看的文件 more 指令是一个基于 vi 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。 快捷键 space：向下翻一页 Enter：向下翻一行 q：立刻离开more.不再显示该文件内容 Ctrl+F：向下滚动一屏 Ctrl+B 返回上一屏 输出当前行的行号 f 输出文件名和当前行的行号 第10章 实操篇 组管理和权限管理 chown 普通用户没有权限 第11章 实操篇 crond 任务调度 ","date":"2020-07-24","objectID":"/linux/:30:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"11.1 原理示意图 ","date":"2020-07-24","objectID":"/linux/:31:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"11.2 概述 任务调度：是指系统在某个时间执行的特定的命令或程序。 任务调度分类： 1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等。 2.个别用户工作：个别用户可能希望执行某些程序。如对mysql数据库的备份。 第 14 章 实操篇 进程管理 ","date":"2020-07-24","objectID":"/linux/:32:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"14.1 进程的基本介绍 在 LINUX 中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个 ID 号。 每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如 www 服务器。 3)每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进 行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。 4)一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。 ","date":"2020-07-24","objectID":"/linux/:33:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"14.5 服务管理 * 查看Linux发行版的名称及其版本号 查看Linux内核版本 cat /proc/version uname -a 查看Linux系统版本的命令 cat /etc/redhat-release 适用于RedHat系的Linux lsb_release -a 适用于所有的Linux发行版，包括RedHat、SuSE、Debian…等发行版。 cat /etc/issue 适用于所有的Linux发行版 第15章 JavaEE定制篇 搭建JavaEE环境 配置环境变量后 source /etc/profile 第17章 大数据定制篇 Shell编程 ","date":"2020-07-24","objectID":"/linux/:34:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"预定义变量 后台和不后台的区别 #!/bin/bash #myShell.sh echo \"hhh\" #!/bin/bash #myPreVar.sh echo \"$$\" ./myShell.sh [\u0026] echo \"$!\" echo \"$?\" ","date":"2020-07-24","objectID":"/linux/:35:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"自定义函数 函数名后面小括号可选 第 18 章 Python 定制篇 开发平台 Ubuntu ","date":"2020-07-24","objectID":"/linux/:36:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.1 Ubuntu 的介绍 Ubuntu 是一个以桌面应用为主的开源 GNU/Linux 操作系统，Ubuntu 是基于 GNU/Linux，支持 x86、amd64（即 x64）和 ppc 架构，由全球化的专业开发团队（Canonical Ltd）打造的。 专业的 Python 开发者一般会选择 Ubuntu 这款 Linux 系统作为生产平台，而且 Ubuntu 安装时会自动安装 Python环境。 ","date":"2020-07-24","objectID":"/linux/:37:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.2 Ubuntu 的安装 ","date":"2020-07-24","objectID":"/linux/:38:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.2.1 安装的步骤 ","date":"2020-07-24","objectID":"/linux/:38:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.2.2 设置语言和输入源 1.设置语言 设置 -\u003e 区域与语言 -\u003e 管理已安装的语言 -\u003e 添加或删除语言 -\u003e 中文简体 -\u003e 应用 -\u003e 拖到最上面 -\u003e 重启 设置中文输入源 设置 -\u003e 区域与语言 -\u003e 输入源 -\u003e 添加输入源 切换输入源 Shift + Super（WIN）+ 空格 Super（WIN）+ 空格 ","date":"2020-07-24","objectID":"/linux/:38:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.3 Ubuntu 的 root 用户 ","date":"2020-07-24","objectID":"/linux/:39:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.3.1 介绍 安装 ubuntu 成功后，都是普通用户权限，并没有最高 root 权限，如果需要使用 root 权限的时候，通常都会在命令前面加上 sudo 。 一般使用su命令来直接切换到root用户的，但是如果没有给root设置初始密码，就会抛出 su : Authentication failure 这样的问题。所以，我们只要给 root 用户设置一个初始密码就好了。 ","date":"2020-07-24","objectID":"/linux/:39:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.3.2 给 root 用户设置密码并使用 输入 sudo passwd 命令，输入一般用户密码并设定 root 用户密码。 设定 root 密码成功后，输入 su 命令，并输入刚才设定的 root 密码，就可以切换成 root 用户。 提示符$代表一般用户，提示符#代表 root 用户。 输入 exit 命令，退出 root 并返回一般用户。 ","date":"2020-07-24","objectID":"/linux/:39:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"18.4 Ubuntu 下开发 Python 安装好 Ubuntu 后，默认就已经安装好 Python 的开发环境。 第 19 章 Python 定制篇 apt 软件管理和远程登录 ","date":"2020-07-24","objectID":"/linux/:40:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.1 apt 介绍 apt 是 Advanced Packaging Tool 的简称，是一款安装包管理工具。 在 Ubuntu 下，apt 命令可用于软件包的安装、删除、清理等，类似于 Windows 中的软件管理工具。 unbuntu 软件管理的原理示意图： ","date":"2020-07-24","objectID":"/linux/:41:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.2 Ubuntu 软件操作的相关命令 sudo apt-get update 更新源 sudo apt-get install package 安装包 sudo apt-get remove package 删除包 sudo apt-cache search package 搜索软件包 sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package –reinstall 重新安装包 sudo apt-get -f install 修复安装 sudo apt-get remove package –purge 删除包，包括配置文件等 sudo apt-get build-dep package 安装相关的编译环境 sudo apt-get upgrade 更新已安装的包 sudo apt-get dist-upgrade 升级系统 sudo apt-cache depends package 了解使用该包依赖那些包 sudo apt-cache rdepends package 查看该包被哪些包依赖 sudo apt-get source package 下载该包的源代码 ","date":"2020-07-24","objectID":"/linux/:42:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.3 更新 Ubuntu 软件下载地址 ","date":"2020-07-24","objectID":"/linux/:43:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.3.1 原理示意图 ","date":"2020-07-24","objectID":"/linux/:43:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.3.2 寻找国内镜像源 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ ","date":"2020-07-24","objectID":"/linux/:43:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.3.3 备份 Ubuntu 默认的源地址 sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup ","date":"2020-07-24","objectID":"/linux/:43:3","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.3.4 更新源服务器列表 sudo apt-get update ","date":"2020-07-24","objectID":"/linux/:43:4","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.5 使用 SSH 远程登录 Ubuntu ","date":"2020-07-24","objectID":"/linux/:44:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.5.1 SSH 介绍 SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录，以及用户之间进行资料拷贝。几乎所有 UNIX 平台—包括 HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行 SSH。 使用 SSH 服务，需要安装相应的服务器和客户端。和 CentOS 不一样，Ubuntu 默认没有安装 SSHD 服务，因此，我们不能进行远程登录。 ","date":"2020-07-24","objectID":"/linux/:44:1","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.5.1 安装 SSH 和启用 执行如下指令后，在当前这台 Linux 上就安装了 SSH 服务端和客户端。 sudo apt-get install openssh-server systemctl start sshd 从 Linux 系统客户机远程登陆 linux 系统服务机 ssh 用户名@IP 登出 exit 或者 logout ","date":"2020-07-24","objectID":"/linux/:44:2","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["Linux"],"content":"19.6 Ubuntu 注意问题 /usr/bin/xauth: timeout in locking authority file /home/xumin//.Xauthority 使用新建用户xumin登录的错误提示？？？ ","date":"2020-07-24","objectID":"/linux/:45:0","tags":["Linux"],"title":"Linux","uri":"/linux/"},{"categories":["面试"],"content":"[TOC] String ","date":"2020-07-22","objectID":"/interview/:0:0","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"String为什么是final类型的？ final修饰的类是不被能继承的，所以final修饰的类是不能被篡改的。 原因 为了实现字符串池 只有当字符串是不可变的，字符串池才有可能实现。 为了线程安全 同一个字符串实例可以被多个线程共享。这样便不用因为线程安全问题而使用同步。字符串自己便是线程安全的。 为了实现String可以创建HashCode不可变性 因为字符串是不可变的，所以在它创建的时候HashCode就被缓存了，不需要重新计算。这就使得字符串很适合作为Map中的键，字符串的处理速度要快过其它的键对象。这就是HashMap中的键往往都使用字符串的原因。 为了安全问题 字符串的不可变性避免了数据库的安全漏洞 内存泄漏 ","date":"2020-07-22","objectID":"/interview/:1:0","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"Java内存泄漏 内存泄漏：对象是无用但是可达的，垃圾回收器没办法移除它们，因为还在被引用着，从而造成内存空间的浪费称为内存泄漏。 在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点： 首先，这些对象是可达的，即在有向图中，存在通路可以与其相连； 其次，这些对象是无用的，即程序以后不会再使用这些对象。 如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。 无用对象不全是未被引用对象。其中还有被引用的。就是这种情况导致了内存泄漏。 在Java中，判断一个内存空间是否符合垃圾收集的标准有两个： 一个是给对象赋予了空值null，以下再没有调用过。 一个是给对象赋予了新值，这样重新分配了内存空间。 ","date":"2020-07-22","objectID":"/interview/:2:0","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"Java内存泄漏的场景 长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。 ","date":"2020-07-22","objectID":"/interview/:3:0","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"1.静态集合类引起内存泄漏 像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。 static Vector v = new Vector(10); for (int i = 0; i \u003c 100; i++) { Object o = new Object(); v.add(o); o = null; } ","date":"2020-07-22","objectID":"/interview/:3:1","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"2.监听器 在Java编程中，通常一个应用当中会用到很多监听器。通过调用一个控件的诸如addXXXListener()等方法来增加监听器，但往往在释放对象的时候却没有记住去删除这些监听器，从而增加了内存泄漏的机会。 ","date":"2020-07-22","objectID":"/interview/:3:2","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"3.各种连接 比如数据库连接，网络连接和IO连接，除非其显式的调用了其close()方法将其连接关闭，否则是不会自动被GC回收的。 对于Resultset和Statement对象可以不进行显式回收，但Connection一定要显式回收，因为Connection在任何时候都无法自动回收，而Connection一旦回收，Resultset 和Statement对象就会立即为NULL。 但是如果使用连接池，情况就不一样了，除了要显式地关闭连接，还必须显式地关闭Resultset Statement对象（关闭其中一个，另外一个也会关闭），否则就会造成大量的Statement对象无法释放，从而引起内存泄漏。这种情况下一般都会在try里面进行连接，在finally里面释放连接。 ","date":"2020-07-22","objectID":"/interview/:3:3","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"4.内部类和外部模块的引用 内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。 外部模块不经意的引用，例如程序员A负责A模块，调用了B模块的一个方法： public void registerMsg(Object b); 这种调用传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B是否提供相应的操作去除引用。 ","date":"2020-07-22","objectID":"/interview/:3:4","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["面试"],"content":"5.单例模式 单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式）。 如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。 考虑下面的例子： public class A { public A() { B.getInstance().setA(this); } ... } //B类采用单例模式 class B{ private A a; private static B instance = new B(); public B(){} public static B getInstance() { return instance; } public void setA(A a) { this.a = a; } public A getA() { return a; } } ","date":"2020-07-22","objectID":"/interview/:3:5","tags":["面试"],"title":"面试题","uri":"/interview/"},{"categories":["MySQL"],"content":"[TOC] MySQL 8.0 安装步骤 ","date":"2020-07-16","objectID":"/mysql/:0:0","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"MSI安装方式 ","date":"2020-07-16","objectID":"/mysql/:1:0","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"1. 下载MSI文件 百度百科：MSI文件是Windows Installer的数据包，它实际上是一个数据库，包含安装一种产品所需要的信息和在很多安装情形下安装（和卸载）程序所需的指令和数据。 进入官网下载地址-MySQL，点击下方的社区下载。 不要点击上面的Customer Download或者Trial Download，会跳转到Oracle的网址，还要注册他们的账号进行登录，很麻烦。 点击MySQL Installer for Windows 下载MSI文件 ","date":"2020-07-16","objectID":"/mysql/:1:1","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"2. 安装 点击MSI文件进行安装 ","date":"2020-07-16","objectID":"/mysql/:1:2","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"3. 配置 在桌面新建my.ini配置文件，写入如下内容，然后移动到C:\\Program Files\\MySQL\\MySQL Server 8.0 [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 [mysqld] # 设置3306端口 port = 3306 # 设置mysql的安装目录 basedir=C:\\Program Files\\MySQL # 设置mysql数据库的数据的存放目录 datadir=C:\\Program Files\\MySQL\\data # 允许最大连接数 max_connections=20 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin目录下执行.\\mysqld.exe install，安装MySQL服务 在Program Files下执行命令需要以管理员身份运行命令行，先以管理员身份运行然后切到bin目录下 C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin目录下执行.\\mysqld.exe --initialize --console，根据my.ini中的字段，创建一个系统数据库以及初始化数据文件目录。 生成的随机root密码需要记住，否则没法登录MySQL C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin目录下执行net start mysql，启动服务 C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin目录下执行mysql -u root -p，输入刚才的随机密码登录 设置新的密码 ALTER USER 'root'@'localhost' identified with mysql_native_password by '\u003c你的密码\u003e'; ","date":"2020-07-16","objectID":"/mysql/:1:3","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"4. 添加环境变量 把C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin添加到系统环境变量PATH中即可 ","date":"2020-07-16","objectID":"/mysql/:1:4","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"5. 测试 任意路径下开启命令行测试 管理员身份打开命令行，停止服务 net stop mysql 管理员身份打开命令行，启动服务 net start mysql 登录 mysql -u root -p ","date":"2020-07-16","objectID":"/mysql/:1:5","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["MySQL"],"content":"压缩包安装方式 在MSI安装方式上 ","date":"2020-07-16","objectID":"/mysql/:2:0","tags":["MySQL"],"title":"MySQL 8.0 安装步骤","uri":"/mysql/"},{"categories":["JavaEE"],"content":"[TOC] 三层架构 三层架构(3-tier architecture)：通常意义上的三层架构就是将整个业务应用划分为：表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。 区分层次的目的即为了“高内聚，低耦合”的思想。 ","date":"2020-07-15","objectID":"/javaee/:0:0","tags":["JavaEE"],"title":"Java EE的三层架构","uri":"/javaee/"},{"categories":["JavaEE"],"content":"概念简介: 1、表现层（UI）：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。 2、业务逻辑层（BLL）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。 3、数据访问层（DAL）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、查找等。 ","date":"2020-07-15","objectID":"/javaee/:1:0","tags":["JavaEE"],"title":"Java EE的三层架构","uri":"/javaee/"},{"categories":["Github"],"content":"将Github pages部署的静态网页绑定个人域名 ","date":"2020-07-14","objectID":"/github/:0:0","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"一. 域名解析服务商配置 以腾讯云为例 ","date":"2020-07-14","objectID":"/github/:1:0","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"1. 控制台 —— 云产品 —— 域名注册 ","date":"2020-07-14","objectID":"/github/:1:1","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"2. 我的域名 —— 解析 ","date":"2020-07-14","objectID":"/github/:1:2","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"3. 添加记录 添加A记录或者CNAME记录任一即可 添加CNAME记录 @ CNAME username.github.io 添加A记录 @ A 192.30.252.153 @ A 192.30.252.154 ","date":"2020-07-14","objectID":"/github/:1:3","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"4. 等待DNS配置生效 大概10分钟 ","date":"2020-07-14","objectID":"/github/:1:4","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"二. Github pages配置 ","date":"2020-07-14","objectID":"/github/:2:0","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"2.1 CNAME配置 在静态网页的代码仓添加一个CNAME文件，并将自己的域名添加进去 ","date":"2020-07-14","objectID":"/github/:2:1","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"2.2 启用HTTPS 自 2018 年 5 月 1 日，Github支持自定义域名的 HTTPS 请求了。 ","date":"2020-07-14","objectID":"/github/:2:2","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Github"],"content":"三. 其他 绑定后可以通过不同域名访问同一个网站 ","date":"2020-07-14","objectID":"/github/:3:0","tags":["Github"],"title":"将Github pages部署的静态网页绑定个人域名","uri":"/github/"},{"categories":["Hugo"],"content":"将Hugo生成的静态网页部署到云服务器 以CentOS 7.6云服务器为例 使用Xshell登录云服务器或使用WebShell登录云服务器(在服务器提供商的控制台登录) 安装httpd服务 yum -y install httpd 安装完毕后，出现如下目录结构 /etc/httpd/conf/httpd.conf # 主配置文件 /var/www/html # 默认网站根目录 启动httpd服务 service httpd start 使用Xftp连接云服务器，将Hugo生成的public目录下的静态网页传输至/var/www/html/目录下 通过http://云服务器IP地址/即可访问 ","date":"2020-07-14","objectID":"/hugotoserver/:0:0","tags":["Hugo"],"title":"将Hugo生成的静态网页部署到云服务器","uri":"/hugotoserver/"},{"categories":["Hugo"],"content":"将Hugo生成的静态网页部署到Github ","date":"2020-07-13","objectID":"/hugotogithub/:1:0","tags":["Hugo"],"title":"将Hugo生成的静态网页部署到Github","uri":"/hugotogithub/"},{"categories":["Hugo"],"content":"前提条件 成功安装Hugo，在源文件目录下运行hugo serve时可以在浏览器输入localhost:1313查看到网页。 在源文件目录下运行hugo生成public目录。 在config.toml中配置参数baseURL = \"https://\u003cuserName\u003e.github.io/\"（userName为Github账号ID，下同）。 这一步很关键，如果没有设置最后在浏览器输入https://\u003cuserName\u003e.github.io/会查看不到网页。 除此之外，也可以选择在第二步生成public时运行hugo --baseURL=\"https://\u003cuserName\u003e.github.io/\" ","date":"2020-07-13","objectID":"/hugotogithub/:1:1","tags":["Hugo"],"title":"将Hugo生成的静态网页部署到Github","uri":"/hugotogithub/"},{"categories":["Hugo"],"content":"准备部署 Hugo官网英文文档给出的部署步骤试了一下没有成功，有几处细节说明不够详细，所以在其基础上给出我的部署步骤。 在Github新建一个代码仓，代码仓名字为\u003cuserName\u003e.github.io。然后将public目录下得文件push到该代码仓。push很简单，在public目录下依次执行： git init git remote add origin git@github.com:\u003cuserName\u003e/\u003cuserName\u003e.github.io.git git add . git commit -m \"first commit\" git push -u origin master 其实这个时候已经可以访问https://\u003cuserName\u003e.github.io/查看网页了，但是后续需要上传新的文章到博客，所以需要进一步部署。 在Github新建一个空的代码仓，代码仓名字随意，比如blog。将其clone到本地，然后打开blog文件夹，将hugo项目的源文件全部复制到该目录下。此时将public目录删除，随后重复第一步的push命令，将hugo项目的源文件push到blog代码仓。 在blog目录下运行如下命令，把\u003cuserName\u003e.github.io代码仓添加为blog代码仓的子模块。 git submodule add -b master https://github.com/\u003cuserName\u003e/\u003cuserName\u003e.github.io.git public 编写快速更新网页的脚本： vim deploy.sh，复制以下代码 #!/bin/sh # 如果命令行失败，停止部署 set -e printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" hugo # 更新上述中blog代码仓 git add . msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" git push origin master # 更新上述中\u003cuserName\u003e.github.io代码仓 cd public git add . msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" git push origin master chmod +x deploy.sh ./deploy.sh \"你的commit信息\" ","date":"2020-07-13","objectID":"/hugotogithub/:1:2","tags":["Hugo"],"title":"将Hugo生成的静态网页部署到Github","uri":"/hugotogithub/"},{"categories":["Markdown","Hugo"],"content":"Hugo中Markdown转网页的一些注意事项 ","date":"2020-07-12","objectID":"/hugomarkdown/:0:0","tags":["Markdown","Hugo"],"title":"Hugo中Markdown转网页的一些注意事项","uri":"/hugomarkdown/"},{"categories":["Markdown","Hugo"],"content":"图片引用路径 方式1： 将Markdown中引用的图片放到Hugo项目的static目录下，注意不是themes/LoveIt/static中的static目录 编写Markdown中的图片引用时使用相对路径，表示上级目录的两个点（../）在这里是指static目录。 比如../images/posts/image.png是指static/images/posts/image.png 方式2： 将Markdown文件名命名为index.md或_index.md，就可以使用相对路径引用和Markdown文件同一目录下的图片 ","date":"2020-07-12","objectID":"/hugomarkdown/:1:0","tags":["Markdown","Hugo"],"title":"Hugo中Markdown转网页的一些注意事项","uri":"/hugomarkdown/"},{"categories":["Markdown","Hugo"],"content":"目录配置（TOC） 在config.toml中配置目录显示设置 [params.page.toc]下的参数配置keepStatic = false时，目录在侧边 [params.page.toc]下的参数配置keepStatic = true时，目录在顶部 ","date":"2020-07-12","objectID":"/hugomarkdown/:2:0","tags":["Markdown","Hugo"],"title":"Hugo中Markdown转网页的一些注意事项","uri":"/hugomarkdown/"},{"categories":["Markdown","Hugo"],"content":"主页文章数量 主页文章数量设置后超出的文章在分页的头像显示不出来？ ","date":"2020-07-12","objectID":"/hugomarkdown/:3:0","tags":["Markdown","Hugo"],"title":"Hugo中Markdown转网页的一些注意事项","uri":"/hugomarkdown/"},{"categories":null,"content":"奥特誓言 饿着肚子不能上学 好天气要晒衣服 穿马路要注意来往车辆 不要依靠别人的力量 不要光着脚在地上玩 ","date":"2020-07-12","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["Markdown"],"content":"​ 原文链接 Emoji 支持 Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-07-09","objectID":"/emoij/:0:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-07-09","objectID":"/emoij/:1:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-07-09","objectID":"/emoij/:1:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-07-09","objectID":"/emoij/:1:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-07-09","objectID":"/emoij/:1:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-07-09","objectID":"/emoij/:1:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-07-09","objectID":"/emoij/:1:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-07-09","objectID":"/emoij/:1:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-07-09","objectID":"/emoij/:1:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-07-09","objectID":"/emoij/:1:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-07-09","objectID":"/emoij/:1:9","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-07-09","objectID":"/emoij/:1:10","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-07-09","objectID":"/emoij/:1:11","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-07-09","objectID":"/emoij/:1:12","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-07-09","objectID":"/emoij/:1:13","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-07-09","objectID":"/emoij/:1:14","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-07-09","objectID":"/emoij/:1:15","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-07-09","objectID":"/emoij/:2:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-07-09","objectID":"/emoij/:2:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-07-09","objectID":"/emoij/:2:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-07-09","objectID":"/emoij/:2:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-07-09","objectID":"/emoij/:2:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-07-09","objectID":"/emoij/:2:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-07-09","objectID":"/emoij/:2:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-07-09","objectID":"/emoij/:2:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-07-09","objectID":"/emoij/:2:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-07-09","objectID":"/emoij/:2:9","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵 man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-07-09","objectID":"/emoij/:2:10","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-07-09","objectID":"/emoij/:2:11","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-07-09","objectID":"/emoij/:2:12","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-07-09","objectID":"/emoij/:2:13","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-07-09","objectID":"/emoij/:2:14","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-07-09","objectID":"/emoij/:2:15","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-07-09","objectID":"/emoij/:2:16","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-07-09","objectID":"/emoij/:3:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-07-09","objectID":"/emoij/:3:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-07-09","objectID":"/emoij/:3:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-07-09","objectID":"/emoij/:3:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-07-09","objectID":"/emoij/:3:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-07-09","objectID":"/emoij/:3:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🐞 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-07-09","objectID":"/emoij/:3:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-07-09","objectID":"/emoij/:3:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-07-09","objectID":"/emoij/:3:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-07-09","objectID":"/emoij/:4:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-07-09","objectID":"/emoij/:4:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-07-09","objectID":"/emoij/:4:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-07-09","objectID":"/emoij/:4:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-07-09","objectID":"/emoij/:4:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-07-09","objectID":"/emoij/:4:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-07-09","objectID":"/emoij/:4:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-07-09","objectID":"/emoij/:4:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-07-09","objectID":"/emoij/:4:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-07-09","objectID":"/emoij/:5:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-07-09","objectID":"/emoij/:5:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-07-09","objectID":"/emoij/:5:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-07-09","objectID":"/emoij/:5:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-07-09","objectID":"/emoij/:5:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-07-09","objectID":"/emoij/:5:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-07-09","objectID":"/emoij/:5:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-07-09","objectID":"/emoij/:5:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-07-09","objectID":"/emoij/:5:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-07-09","objectID":"/emoij/:5:9","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-07-09","objectID":"/emoij/:5:10","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-07-09","objectID":"/emoij/:5:11","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-07-09","objectID":"/emoij/:6:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-07-09","objectID":"/emoij/:6:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-07-09","objectID":"/emoij/:6:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-07-09","objectID":"/emoij/:6:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-07-09","objectID":"/emoij/:6:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-07-09","objectID":"/emoij/:6:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-07-09","objectID":"/emoij/:7:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-07-09","objectID":"/emoij/:7:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-07-09","objectID":"/emoij/:7:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-07-09","objectID":"/emoij/:7:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-07-09","objectID":"/emoij/:7:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-07-09","objectID":"/emoij/:7:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-07-09","objectID":"/emoij/:7:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-07-09","objectID":"/emoij/:7:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-07-09","objectID":"/emoij/:7:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-07-09","objectID":"/emoij/:7:9","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-07-09","objectID":"/emoij/:7:10","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-07-09","objectID":"/emoij/:7:11","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-07-09","objectID":"/emoij/:7:12","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-07-09","objectID":"/emoij/:7:13","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-07-09","objectID":"/emoij/:7:14","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-07-09","objectID":"/emoij/:7:15","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-07-09","objectID":"/emoij/:7:16","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-07-09","objectID":"/emoij/:7:17","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-07-09","objectID":"/emoij/:7:18","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-07-09","objectID":"/emoij/:8:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-07-09","objectID":"/emoij/:8:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-07-09","objectID":"/emoij/:8:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-07-09","objectID":"/emoij/:8:3","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-07-09","objectID":"/emoij/:8:4","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-07-09","objectID":"/emoij/:8:5","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-07-09","objectID":"/emoij/:8:6","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-07-09","objectID":"/emoij/:8:7","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-07-09","objectID":"/emoij/:8:8","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-07-09","objectID":"/emoij/:8:9","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-07-09","objectID":"/emoij/:8:10","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-07-09","objectID":"/emoij/:8:11","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-07-09","objectID":"/emoij/:8:12","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-07-09","objectID":"/emoij/:8:13","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-07-09","objectID":"/emoij/:9:0","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-07-09","objectID":"/emoij/:9:1","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-07-09","objectID":"/emoij/:9:2","tags":["Markdown"],"title":"Emoij支持","uri":"/emoij/"},{"categories":["待定"],"content":"段连杰 好好学习 天天向上 ","date":"2018-06-14","objectID":"/first/:0:0","tags":["待定"],"title":"我的第一篇文章","uri":"/first/"}]